# version(1)
# Welcome to Clearlag's language file! Here you can modify the various strings ClearLag uses to suit your language, or preference
# -- NOTE: This is the format: '<key>({replaceables}...):<message>'
# -- NOTE: The replaceables are replaced depending on order, not the actual key name. So you may customize the key names too!
# -- NOTE: The { ... } symbols represent a message block. This is applicable anywhere you want... Do not include any characters with {, or }

####----> Commands -->
command.error.wrongUsage({usage},{name})=&cYanlış kullanıme: &8/&7lagg {name} {usage}
command.error.noPermission({name})=&8/&7lagg {name} &cKomudunu kullanmaya yetkiniz yok
command.error.onlyForPlayer()=&cBu komut sadece oyuncular tarafından kullanılabilir!

##]-> /lagg
command.lagg.nopermission()=&cBu komudu kullanmaya yetkiniz yok!
command.lagg.header()=&3-------------(&b&lSizin Clearlag komutlarınız&3)-------------
command.lagg.footer()=&3----------------------------------------------------
command.lagg.helpline({name},{desc})= &4- &8/&3lagg &b{name} &f -  {desc}

##]-> /lagg admin
command.admin.name()=admin
command.admin.desc()=(Clearlag'ın modüllerini kontrol et)
command.admin.usage()=
command.admin.enabledModules({moduleList})=&aAktif yeniden yüklenebilir modüller: &7{moduleList}
command.admin.noReloadableFields({module})={module} &cyeniden yüklenebilir bir alana sahip değil!
command.admin.notEnabled({module})=&cBu modül aktif değil!
command.admin.reload({module})=&aModule {module} has been reloaded!
command.admin.failedReload({module})=&c{module} modülü yeniden yüklenemedi
command.admin.invalidModule({argument})=&cGeçersiz modül: {argument}
command.admin.enabledModules({modules})=&aAktif modüller: &7{modules}
command.admin.stoppedModule({module})=&a{module} modülü &cdurduruldu&a!
command.admin.startableModules({modules})=&aBaşlatılabilir modüller: &7{modules}
command.admin.alreadyEnabled({module})=&cBu modül zaten aktif!
command.admin.enabled({module})=&a{module} modülü zaten aktif!
command.admin.moduleStatus({listeners},{commands},{tasks},{modules})={
&3=--------------[&6-&3] &b&lModül Durumu &3[&6-&3]----------------=
              &8[&7Gray = Devre Dışıe&8]   &8[&aGreen = Aktif&8]
&6Dinleyiciler: {commands}
&6Komutlar: {commands}
&6Görevler: {tasks}
&6Modüller: {modules}
}
command.admin.help()={
&3=-------------[&6-&3] &b&lModül komutları &3[&6-&3]---------------=
&4  - &3/lagg admin &creload &b<module>
&4  - &3/lagg admin &cstop &b<module>
&4  - &3/lagg admin &cstart &b<module>
&4  - &3/lagg admin &clist
&3-----------------------------------------------------
}

##]-> /lagg area
command.area.name()=bölge
command.area.usage()=<çap>
command.area.desc()=(Çevrenizdeki varlıkları temizleyin)
command.area.error({arg})=&4Geçersiz argüman verildi&8: &c{arg}
command.area.message({removed},{radius})=&6[&aClearLag&6] &3{radius} &bçapındaki &3{removed} tane varlık temizlendi&b!

##]-> /lagg checkchunk
command.checkchunk.name()=chunkkontrol
command.checkchunk.usage()=
command.checkchunk.desc()=(Chunk'ın varlıklarını gösterir)
command.checkchunk.header()=&4*&3&m                            &8(&a&lChunk Bilgisi&8)&3&m                              &4*
command.checkchunk.tilelist()=&3 Tile Varlıkları&8:
command.checkchunk.entitylist()=&3 Varlıklar&8:
command.checkchunk.line({count},{type})=   &8- &ax{count} &7{type}
command.checkchunk.footer()=&4*&3&m                                                                             &4*

##]-> /lagg check
command.check.name()=kontrol
command.check.usage()=[dünya1, dünya2...]
command.check.desc()=(Dünyanızdaki varlıkları sayar)
command.check.invalidworld({arg})=&4Geçersiz dünya&8: {arg}
command.check.header()=&4*&3&m                          &8(&a&lSunucu Durumu&8)&3&m                           &4*
command.check.printed({removed1},{mobs},{animals},{players},{chunks},{activehoppers},{inactivehoppers},{spawners},{uptime},{tps},{usedmemory},{maxmemory},{freememory})={
&3   Yerdeki eşyalar: &b{removed1}
&3   Canlı Canavarlar: &b{mobs}
&3   Barışçıl Canlılar: &b{animals}
&3   Canlı Oyuncular: &b{players}
&3   Yüklü Chunklar: &b{chunks}
&3   Aktif Huniler: &b{activehoppers}
&3   Çalışmayan Huniler: &b{inactivehoppers}
&3   Aktif Canavar Yaratıcıları: &b{spawners}
&3   Çalışma Süresi: &b{uptime}
&3   Şuanki TPS: &b{tps}
&3   RAM Kullanımı: &b{usedmemory}&7/&b{maxmemory} &7MB
&3   Kullanılmayan Hafıza: &b{freememory} &7MB
}
command.check.footer()=&4*&3&m                                                                             &4*

##]-> /lagg chunk
command.chunk.name()=chunk
command.chunk.usage()=[list-size]
command.chunk.desc()=(Laglı chunkları bulur)
command.chunk.header()=&7&m                           &7( &bEn Büyük Chunklar &7)&m                           "
command.chunk.print({order},{world},{x},{z},{count})=&4{order}&7) &3World: &b{world}  &3x: &b{x}  &3z: &b{z}  &3Entities: &b{count}

##]-> /lagg clear
command.clear.name()=temizle
command.clear.usage()=
command.clear.desc()=(Dünyanızdaki varlıkları temizler)
command.clear.message({count})=&6[&aClearLag&6] &a&bSiz &3{count}&b tane varlık temizlediniz!

##]-> /lagg gc
command.gc.name()=gc
command.gc.usage()=
command.gc.desc()=(Çöp toplayıcısını çalıştırın)
command.gc.message()=&6[&aClearLag&6] &a&bHemen çöp toplama isteniyor! &7(Uyarı: Java'nın VM'i otomatik olarak efektif bir şekilde hafızayı boşaltıcak. Bu komudu sadece debug ya da büyük bir heap'i temizlemek için kullanın)

##]-> /lagg durdur
command.halt.name()=durdur
command.halt.usage()=[açık/kapalu]
command.halt.desc()=(Sunucunun çoğu aktivitesini durdurur)
command.halt.halted()=&6[&aClearLag&6] &a&bSunucu aktivitesi &cdurduruldu&b!
command.halt.unhalted()=&6[&aClearLag&6] &a&aSunucu aktivitesi artık durdurulmuş değil!

##]-> /lagg killmobs
command.killmobs.name()=canlılarıöldür
command.killmobs.usage()=
command.killmobs.desc()=(DÜnyanızdaki canlıları öldürür)
command.killmobs.message({count})=&6[&aClearLag&6] &a&3{count} &btane canlı öldürüldü!

##]-> /lagg profile
command.profile.name()=profile
command.profile.usage()=<sample-seconds> <sample-type>
command.profile.desc()=(Profile lag inducing events)
command.profile.invalidtime({arg})=&4Invalid sample time specified&8: &c{arg}
command.profile.invalidprofiler({arg},{profilers})={
&4Invalid Profiler Specified&8: &c{arg}
&cValid Profilers&8: &7{profilers}
}
command.profile.nosamples()=&cNo samples logged during sample time
command.profile.header()=&7&m                           &7( &bChunk Samples &7)&m
command.profile.line({listing},{world},{x},{z},{samples})=&4{listing}&7) &3World: &b{world}&7, &3x: &b{x}&7, &3z: &b{z}   &3Sample Size: &b{samples}
command.profile.started({time})=&6[&aClearLag&6] &aProfiler started, running for &7{time} &aseconds

##]-> /lagg reload
command.reload.name()=reload
command.reload.usage()=
command.reload.desc()=(Reloads clearlag)
command.reload.begin()=&6[&aClearLag&6] &bAttempting to reload modules...
command.reload.successful()=&6[&aClearLag&6] &bModules have been reloaded!

##]-> /lagg samplememory
command.samplememory.name()=samplememory
command.samplememory.usage()=<sample-seconds>
command.samplememory.desc()=(Sample memory/GC usage)
command.samplememory.invalidinteger({arg})=&4Invalid integer specified&8: &c{arg}
command.samplememory.begin({time})=&aRunning memory sampler for &7{time} &aseconds
command.samplememory.header()=&4*&3&m                       &8(&a&lMemory Tick Stats&8)&3&m                        &4*
command.samplememory.memory({high},{average})={
&aMemory (In MB):
&3   Highest Memory Usage Per-tick: &b{high}
&3   Average Memory Usage Per-tick: &b{average}
}
command.samplememory.gc({total},{highest},{lowest},{averagetime},{averageticks})={
&aGarbage Collector (Based on ticks, in Milliseconds):
&3   Total GC collections (By Tick): &b{total}
&3   Highest Garbage Collector time: &b{highest}
&3   Lowest Garbage Collector time: &b{lowest}
&3   Average Garbage Collector time: &b{averagetime}
&3   Average Ticks Between Collections: &b{averageticks}
}
command.samplememory.notenoughtime()=&cNot a long enough sample-time for garbage collector results

##]-> /lagg sampleticks
command.sampleticks.name()=sampleticks
command.sampleticks.usage()=[ticksToSample] [raw/stats]
command.sampleticks.desc()=(Sample your server's ticks)
command.sampleticks.start({threadname},{time})=&aStarted full-tick sampling on thread &7{threadname} &afor &7{time} &aticks &7(Estimation, not 100% exact)
command.sampleticks.rawheader()=&cRaw tick-timings: &7(Normal tick is between 0-50ms in time)
command.sampleticks.rawprint({time})=&8 - {time}
command.sampleticks.print({large},{small},{average},{spikes})={
&aTick-Stats: &7(Normal tick is between 0-50ms in time)
&3   Largest-tick: {large}
&3   Smallest-tick: {small}
&3   Average-tick: {average}
&3   Spikes: {spikes}
}

##]-> /lagg tpchunk
command.tpchunk.name()=tpchunk
command.tpchunk.usage()=<x> <z> [world]
command.tpchunk.desc()=(Teleport to chunks)
command.tpchunk.begin()=&6[&aClearLag&6] &bAttempting to reload modules...
command.tpchunk.successful()=&6[&aClearLag&6] &bModules have been reloaded!
command.tpchunk.invalidinteger({arg})=&4Invalid integer specified&8: &c{arg}
command.tpchunk.invalidworld({arg})=&4World does not exist&8: &c{arg}
command.tpchunk.teleported({x},{z})=&6[&aClearLag&6] &bTeleported to chunk: &3{x}&7, &3{z}

##]-> /lagg tps
command.tps.name()=tps
command.tps.usage()=
command.tps.desc()=(Displays server's average tick rate)
command.tps.print({tps})=&6[&aClearLag&6] &a{tps}

##]-> /lagg unloadchunks
command.unloadchunks.name()=unloadchunks
command.unloadchunks.usage()=
command.unloadchunks.desc()=(Unloads unused chunks)
command.unloadchunks.print({chunks})=&6[&aClearLag&6] &3{chunks} &bchunks have been unloaded!

##]-> /lagg memory
command.memory.name()=memory
command.memory.usage()=[tick-rate]
command.memory.desc()=(View Heap info)
command.memory.message()=&3Started JVM heap sampling on the listed memory pools
command.memory.invalidinteger({arg})=&4Invalid poll-rate specified&8: &c{arg}

##]-> /lagg performance
command.performance.name()=performance
command.performance.usage()=[tick-rate]
command.performance.desc()=(View Server Performance)
command.performance.message()=&3Started thread sampling (More &1sleep&3 is better!)
command.performance.invalidinteger({arg})=&4Invalid poll-rate specified&8: &c{arg}
